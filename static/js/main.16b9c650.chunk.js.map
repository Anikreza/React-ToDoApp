{"version":3,"sources":["SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","App","useState","api","setApi","useEffect","getApi","a","fetch","response","json","fetchedData","data","console","log","responseGoogle","profileObj","className","map","first_name","email","id","clientId","buttonText","onSuccess","onFailure","cookiePolicy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAyDeA,I,QCLAC,MA7Cf,WAEG,IAEA,EAAsBC,mBAAS,CAAC,KAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAGCC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAM,uCAAG,8BAAAC,EAAA,sEACQC,MAVd,+BASM,cACPC,EADO,gBAEYA,EAASC,OAFrB,OAEPC,EAFO,OAGbP,EAAOO,EAAYC,MACnBC,QAAQC,IAAIH,EAAYC,MAJX,2CAAH,qDAOX,SAASG,EAAgBN,GACxBI,QAAQC,IAAIL,GACZI,QAAQC,IAAIL,EAASO,YAKzB,OACE,sBAAKC,UAAU,MAAf,UAEQd,EAAIe,KAAI,SAAAN,GAAI,OACX,+BAAkB,uBAAMA,EAAKO,WAA7B,KAA2CP,EAAKQ,MAAM,uBAAK,uBAA3D,MAASR,EAAKS,OAIrB,cAAC,cAAD,CACEC,SAAS,2EACTC,WAAW,oBACXC,UAAWT,EACXU,UAAWV,EACXW,aAAc,2BCjCPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16b9c650.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./SearchBar.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nfunction SearchBar({ placeholder, data }) {\n  const [filteredData, setFilteredData] = useState([]);\n  const [wordEntered, setWordEntered] = useState(\"\");\n\n  const handleFilter = (event) => {\n    const searchWord = event.target.value;\n    setWordEntered(searchWord);\n    const newFilter = data.filter((value) => {\n      return value.title.toLowerCase().includes(searchWord.toLowerCase());\n    });\n\n      setFilteredData(newFilter);\n    \n  };\n\n  const clearInput = () => {\n    setFilteredData([]);\n    setWordEntered(\"\");\n  };\n\n  return (\n    <div className=\"search\">\n      <div className=\"searchInputs\">\n        <input\n          type=\"text\"\n          placeholder={placeholder}\n          value={wordEntered}\n          onChange={handleFilter}\n        />\n        <div className=\"searchIcon\">\n          {filteredData.length === 0 ? (\n            <SearchIcon />\n          ) : (\n            <CloseIcon id=\"clearBtn\" onClick={clearInput} />\n          )}\n        </div>\n      </div>\n      {filteredData.length != 0 && (\n        <div className=\"dataResult\">\n          {filteredData.slice(0, 2).map((value, key) => {\n            return (\n              <a className=\"dataItem\" href={value.link} target=\"_blank\">\n                <p>{value.title} </p>\n              </a>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, {useState,useRef, useEffect} from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./SearchBar\";\nimport Search from \"./Search\";\nimport BookData from \"./Data.json\";\nimport {GoogleLogin} from 'react-google-login'\n\nfunction App() {\n \n   const url='https://reqres.in/api/users';\n\n   const [api, setApi] = useState([\"\"]);\n \n    \n    useEffect(() => {\n      getApi()\n    }, [])\n\n    const getApi = async()=>{\n      const response=await fetch(url);\n      const fetchedData= await response.json();\n      setApi(fetchedData.data);\n      console.log(fetchedData.data);\n    }\n\n     function responseGoogle (response){\n      console.log(response);\n      console.log(response.profileObj);\n      \n      \n    }\n\n  return (\n    <div className=\"App\">\n\n           {api.map(data=>(\n             <h2 key={data.id}><hr/>{data.first_name}  {data.email}<br/><br/> </h2>\n           ))}\n\n\n      <GoogleLogin\n        clientId=\"766075204483-lulb8u6h2g1v0h8kp0gsnirlntf170en.apps.googleusercontent.com\"\n        buttonText=\"Login With Google\"\n        onSuccess={responseGoogle}\n        onFailure={responseGoogle}\n        cookiePolicy={'single_host_origin'}\n        \n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}